/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include <stdio.h>
#include "platform.h"

#include "xgpiops.h"

#include "xparameters.h"

#include <xbasic_types.h>

#include "xscugic.h"
#include "xgpio.h"
#include "xil_exception.h"

// MY DEFINES//
#define BRAM_FULL_CHANNEL 1
#define UART_COMPLETE_CHANNEL 2
#define BRAM_DEPTH 2048
#define BRAM_INTERRUPT XGPIO_IR_CH1_MASK  /* Channel 1 Interrupt Mask */
//#define BRAM_BASE_ADDRESS 0x40000000


//***********GLOBAL VARIABLES****************************//
XScuGic InterruptController ;

static XScuGic_Config *GicConfig;
volatile int InterruptCount; /* Count of interrupts that have occured */

static u32* BRAM_BASE_ADDRESS = (u32 *)0x40000000;
static XGpio Gpio; /* The Instance of the GPIO Driver */

//static u16* BRAM_BASE_ADDRESS_2 = (u16 *)0x40000000;

//***********GLOBAL VARIABLES****************************//



//******************FUNCTIONS****************************//
//static void InterruptHandler(void *InstancePtr);
void read_bram()
{
	int index;
	for (index=0;index< BRAM_DEPTH ;index++)
   	{

			u32 *addr = &BRAM_BASE_ADDRESS[index];
			u32 value = *addr;
			xil_printf("%08x\n",value);
	}

}



static void InterruptHandler(void *InstancePtr)
{

	XGpio *GpioPtr = (XGpio *)InstancePtr;

	//read_bram();
	xil_printf(" in interrupt handler\n");




	
	 // Disable the interrupt
	 
	XGpio_InterruptDisable(GpioPtr, BRAM_INTERRUPT);

	// Keep track of the number of interrupts that occur 

	InterruptCount = InterruptCount+2;

	read_bram();
	
	// read_bram() ;
//	u32 *addr = &BRAM_BASE_ADDRESS[1024];
//	u32 value = *addr;
//	xil_printf("%08x\n",value);


	 // Clear the interrupt such that it is no longer pending in the GPIO 

	 (void)XGpio_InterruptClear(GpioPtr, BRAM_INTERRUPT);

     // enable interrupts again

	 XGpio_DiscreteWrite(GpioPtr,UART_COMPLETE_CHANNEL,0x1);

	 InterruptCount = InterruptCount -1 ;
    XGpio_DiscreteWrite(GpioPtr,UART_COMPLETE_CHANNEL,0x0);
     XGpio_InterruptEnable(GpioPtr, BRAM_INTERRUPT);

}
int SetupInterruptSystem(XScuGic *XScuGicInstancePtr)
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;

}
int intialize_interrupt_system (device_id)
{
	int status;

	GicConfig = XScuGic_LookupConfig(device_id);
	if( GicConfig ==NULL)
		return XST_FAILURE;

	status = XScuGic_CfgInitialize( &InterruptController ,GicConfig,GicConfig->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;


	XScuGic_SetPriorityTriggerType(&InterruptController, XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR,
					0xA0, 0x3);


	status = SetupInterruptSystem (&InterruptController );
	if (status != XST_SUCCESS)
			return XST_FAILURE;

	status =XScuGic_Connect (&InterruptController , XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR,
			(Xil_ExceptionHandler) InterruptHandler,(void *)&Gpio);
	/*
	 * Enable the interrupt for the GPIO device.
	 */
	XScuGic_Enable(&InterruptController, XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR );


	/*
	 * Enable the GPIO channel interrupts so that push button can be
	 * detected and enable interrupts for the GPIO device
	 */
	XGpio_InterruptEnable(&Gpio, BRAM_INTERRUPT);
	XGpio_InterruptGlobalEnable(&Gpio);
	/*
		 * Initialize the exception table and register the interrupt
		 * controller handler with the exception table
		 */
		Xil_ExceptionInit();

	if (status != XST_SUCCESS)
		return XST_FAILURE;
	return XST_SUCCESS;

}




//*(int*)(0xF8F01288) |= 0x08000000;
int main()
{
    init_platform();
     xil_printf("Hello World\n\r");

    int Status;

    Status = XGpio_Initialize(&Gpio, XPAR_AXI_GPIO_0_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test on the GPIO.  This is a minimal test and only
	 * verifies that there is not any bus error when reading the data
	 * register
	 */
	XGpio_SelfTest(&Gpio);

	/*
	 * Setup direction register so the switch is an input and the LED is
	 * an output of the GPIO
	 */
	XGpio_SetDataDirection(&Gpio, BRAM_FULL_CHANNEL, 0xFFFF);
	XGpio_SetDataDirection(&Gpio, UART_COMPLETE_CHANNEL, 0);
    
    
	xil_printf("GPIO Interrupt Example Test \r\n");

	/*
	 * Run the GPIO interrupt example, specify the parameters that
	 * are generated in xparameters.h.
	 */
      intialize_interrupt_system(XPAR_PS7_SCUGIC_0_DEVICE_ID); // param value = 0

	while(1);


    cleanup_platform();
    return 0;
}


