/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include <stdio.h>
#include "platform.h"

#include "xgpiops.h"

#include "xparameters.h"

#include <xbasic_types.h>

#include "xscugic.h"


#define INPUT_BANK 0

#define BRAM_DEPTH 2048

//void print(char *str);
//u16* maskAddr = XPAR_BRAM_0_BASEADDR; --it istn getting imported
u16* bram_address = 0x40000000;
XScuGic InterruptController ;

static XScuGic_Config *GicConfig;
static XGpioPs Gpio; /* The Instance of the GPIO Driver */
int width = 1024;
int height = 384;


void read_bram()
{
	int index;
	for (index=0;index< BRAM_DEPTH ;index++)
   	{

			u16 *addr = &bram_address[index];
			u16 value = *addr;
			xil_printf("%d \n",value);
	}

}
void InterruptHandler(void *CallBackRef)
{
	//read_bram();
	xil_printf(" in interrupt handler\n");
}
int SetupInterruptSystem(XScuGic *XScuGicInstancePtr)
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;

}
int intialize_interrupt_system (device_id)
{
	int status;

	GicConfig = XScuGic_LookupConfig(device_id);
	if( GicConfig ==NULL)
		return XST_FAILURE;

	status = XScuGic_CfgInitialize( &InterruptController ,GicConfig,GicConfig->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	status = SetupInterruptSystem (&InterruptController );
	if (status != XST_SUCCESS)
			return XST_FAILURE;

	status =XScuGic_Connect (&InterruptController , XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR,
			(Xil_ExceptionHandler) InterruptHandler,(void *)Gpio);

	if (status != XST_SUCCESS)
		return XST_FAILURE;
	/*
	 * Enable falling edge interrupts for all the pins in bank 0.
	 */
	XGpioPs_SetIntrType(Gpio, INPUT_BANK, 0x00, 0x00, 0x00);

	/*
	 * Set the handler for gpio interrupts.
	 */
	XGpioPs_SetCallbackHandler(Gpio, (void *)Gpio, InterruptHandler);


	/*
	 * Enable the GPIO interrupts of Bank 0.
	 */
	XGpioPs_IntrEnable(Gpio, INPUT_BANK, 0xFFFFFFFF);

	XScuGic_Enable ( &InterruptController ,XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR);

	return XST_SUCCESS;

}




//*(int*)(0xF8F01288) |= 0x08000000;
int main()
{
    init_platform();
     xil_printf("Hello World\n\r");

    int Status;

	xil_printf("GPIO Interrupt Example Test \r\n");

	/*
	 * Run the GPIO interrupt example, specify the parameters that
	 * are generated in xparameters.h.
	 */
	Status = GpioIntrExample(&Intc, &Gpio, GPIO_DEVICE_ID,
				 GPIO_INTERRUPT_ID);


	{
        	

	}
    cleanup_platform();
    return 0;
}


